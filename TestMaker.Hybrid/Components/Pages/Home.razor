@page "/"
@using System.Text.Json
@inject IJSRuntime JSRuntime
<MudPaper Class="py-4 px-4 d-flex flex-row" Elevation="4">
    <div class="d-flex flex-column px-1 py-1" style="width:50%;">
        <MudPaper Class="px-1 py-1" Elevation="3">
            <MudText Typo="Typo.h3"><MudText Color="Color.Primary" Typo="Typo.h2" Inline>Project: </MudText>@Project.Name</MudText>
        </MudPaper>
        <MudPaper Class="px-1 py-1 d-flex flex-column my-1 justify-content-between h-100" Elevation="3" >
            <div class="px-1 py-1 h-100">
                @if(SelectedQuestion != null)
                {
                    <MudText Typo="Typo.h5"><MudText Typo="Typo.h5" Color="Color.Secondary" Inline>Question: </MudText>@SelectedQuestion.QuestionText</MudText>
                    @switch (SelectedQuestion)
                    {
                        case TestOneQuestion t1Question:
                            <MudText Typo="Typo.h6" Color="Color.Tertiary">Answers:</MudText>
                            <MudRadioGroup @bind-Value="t1Question.CorrectAnswer" T="CorrectAnswer">
                                @foreach (var answer in t1Question.Answers)
                                {
                                    <div class="d-flex my-2">
                                        <div>
                                            <MudRadio Value="@(answer.AnswerValue)">
                                                @if(!Editing)
                                                {
                                                    @answer.Answer
                                                }
                                            </MudRadio>
                                        </div>
                                        @if(Editing)
                                        {
                                            <MudTextField @bind-Value="answer.Answer" Label="Provide answer" Clearable FullWidth />
                                        }
                                    </div>
                                }
                            </MudRadioGroup>
                            break;
                        case TestMultiQuestion tmquestion:
                            <MudText Typo="Typo.h6" Color="Color.Tertiary">Answers:</MudText>
                            @foreach (var answer in tmquestion.Answers)
                            {
                                <div class="d-flex my-2">
                                    <div>
                                        <MudCheckBox T="bool" Label="@(!Editing? answer.Answer : "")" Value="@(tmquestion.CorrectAnswers.Contains(answer.AnswerValue))" ValueChanged="(() => CheckBoxChanged(answer.AnswerValue))"></MudCheckBox>
                                    </div>
                                    @if (Editing)
                                    {
                                        <MudTextField @bind-Value="answer.Answer" Label="Provide answer" Clearable FullWidth />
                                    }
                                </div>
                                
                            }
                            break;
                        case OpenQuestion openQuestion:
                            <MudText Typo="Typo.h6" Color="Color.Tertiary">Answer:</MudText>
                            @if(!Editing)
                            {
                                <MudText>@openQuestion.Answer</MudText>
                            }
                            else
                            {
                                <MudTextField Text="@openQuestion.Answer" T="string" AutoGrow MaxLines="35"/>
                            }
                            break;
                        default:
                            <MudText>Unknown</MudText>
                            break;
                    }
                }
                else
                {   <div class="d-flex justify-content-center align-items-center h-100 flex-column">
                        <div>
                            <MudText Typo="Typo.h5" Align="Align.Center" Color="Color.Tertiary">Add new or do something with question</MudText>
                        </div>
                        <div class="py-2">
                            <MudButton Color="Color.Success" EndIcon="@Icons.Material.Filled.Add">Add new</MudButton>
                        </div>
                    </div>
                }
            </div>
            @if(SelectedQuestion != null)
            {
                <div class="d-flex justify-content-end">
                    <MudButton Color="Color.Success">Save</MudButton>
                    <MudButton Color="Color.Error">Cancel</MudButton>
                </div>
            }
        </MudPaper>
    </div>
    <div class="px-1 py-1 w-50">
        <MudPaper Class="px-1 py-1 my-1 overflow-scroll" Elevation="3" Style="height:94vh;">
            @foreach(var question in ProjectService.GetQuestions(Project))
            {
                <div class="d-flex flex-row justify-content-between">
                    <div class="px-1 py-1">
                        <MudText>@question.QuestionText</MudText>
                    </div>
                    <div class="px-1 py-1 d-flex">
                        <div>
                            <MudButton Color="Color.Primary" OnClick="(() => ViewQuestion(question.ID))">View</MudButton>
                        </div>
                        <div>
                            <MudButton Color="Color.Warning" OnClick="(() => EditQuestion(question.ID))">Edit</MudButton>
                        </div>
                        <div>
                            <MudButton Color="Color.Error" OnClick="(() => DeleteQuestion(question.ID))">Delete</MudButton>
                        </div>
                    </div>
                </div>
            }
        </MudPaper>
    </div>
    @if (!string.IsNullOrEmpty(menuOption))
    {
        <div>Clicked option in menu: @menuOption</div>
    }
</MudPaper>

@code {

    [Inject] IProjectService ProjectService { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }

    private Project Project { get; set; } = new();
    private Question? SelectedQuestion;

    private string menuOption;

    private bool Editing = false;

    protected override void OnInitialized()
    {
        WeakReferenceMessenger.Default.Register<MenuItemClickedMessage>(this, (r, message) =>
        {
            menuOption = message.SelectedOption;
            InvokeAsync(StateHasChanged);
        });
        
        WeakReferenceMessenger.Default.Register<SaveFileClickedMessage>(this, (r, message) =>
        {
            WeakReferenceMessenger.Default.Send(Project);
        });

        ProjectService.MockData(Project);

        // SelectedQuestion = ProjectService.GetRandomQuestion(Project, QuestionType.Open);
        // Editing = true;
    }

    private void EditQuestion(Guid ID)
    {
        Editing = true;
        SelectedQuestion = ProjectService.GetQuestionByID(Project, ID);
    }

    private void ViewQuestion(Guid ID)
    {
        Editing = false;
        SelectedQuestion = ProjectService.GetQuestionByID(Project, ID);
        // _ = JSRuntime.InvokeVoidAsync("console.log", $"ViewQuestion(Guid ID = {ID})");
        // StateHasChanged();
    }

    private void DeleteQuestion(Guid ID)
    {
        var response = ProjectService.DeleteQuestion(Project, ID);
        if(!response.IsSuccess)
        {
            Snackbar.Add(response.Message, Severity.Error);
        }

        if(SelectedQuestion != null && SelectedQuestion.ID == ID)
        {
            SelectedQuestion = null;
        }
    }

    private void CheckBoxChanged(CorrectAnswer value)
    {
        if (SelectedQuestion is not TestMultiQuestion question) return;
        if (question.CorrectAnswers.Contains(value))
        {
            question.CorrectAnswers.Remove(value);
        }
        else
        {
            question.CorrectAnswers.Add(value);
        }
    }

    public void Dispose()
    {
        WeakReferenceMessenger.Default.UnregisterAll(this);
    }
    
}