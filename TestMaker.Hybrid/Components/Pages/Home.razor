@page "/"
<MudPaper Class="py-4 px-4 d-flex flex-row" Elevation="4">
    <div class="d-flex flex-column px-1 py-1" style="width:50%;">
        <MudPaper Class="px-1 py-1" Elevation="3">
            <MudText Typo="Typo.h2"><MudText Color="Color.Primary" Typo="Typo.h2" Inline="true">Project: </MudText>@Project.Name</MudText>
        </MudPaper>
        <MudPaper Class="px-1 py-1 d-flex flex-column my-1 justify-content-between h-100" Elevation="3" >
            <div class="px-1 py-1">
                <MudText Typo="Typo.h5"><MudText Typo="Typo.h5" Color="Color.Secondary" Inline="true">Question: </MudText>@SelectedQuestion.QuestionText</MudText>
                <MudText Typo="Typo.h6" Color="Color.Tertiary">Answer:</MudText>
                @switch (SelectedQuestion)
                {
                    case TestOneQuestion:
                        TestOneQuestion t1question = (TestOneQuestion)SelectedQuestion;
                        <MudText>Ans: @t1question.CorrentAnswer</MudText>
                        <MudForm>
                            <MudRadioGroup @bind-Value="t1question.CorrentAnswer" T="CorrentAnswer">
                                @foreach (var answer in t1question.Answers)
                                {
                                    <div>
                                        <MudRadio Value="@(answer.AnswerValue)">@answer.Answer -> @answer.AnswerValue</MudRadio>
                                    </div>
                                }
                            </MudRadioGroup>
                        </MudForm>
                        break;
                    case TestMultiQuestion:
                        TestMultiQuestion tmquestion = (TestMultiQuestion)SelectedQuestion;
                        @foreach (var answer in tmquestion.Answers)
                        {
                            <MudCheckBox T="bool" Label="@answer.Answer" Value="@(tmquestion.CorrentAnswers.Contains(answer.AnswerValue))" ValueChanged="(() => CheckBoxChanged(answer.AnswerValue))"></MudCheckBox>
                        }
                        break;
                    case OpenQuestion:
                        OpenQuestion openQuestion = (OpenQuestion)SelectedQuestion;
                        <MudText>@openQuestion.Answer</MudText>
                        break;
                    default:
                        <MudText>Unknown</MudText>
                        break;
                }
            </div>
            <div class="d-flex justify-content-end">
                <MudButton Color="Color.Success">Save</MudButton>
                <MudButton Color="Color.Error">Cancel</MudButton>
            </div>
        </MudPaper>
    </div>
    <div class="px-1 py-1 w-50">
        <MudPaper Class="px-1 py-1 my-1 overflow-scroll" Elevation="3" Style="height:94vh;">
            @foreach(var question in Project.Questions)
            {
                <div class="d-flex flex-row justify-content-between">
                    <div class="px-1 py-1">
                        <MudText>@question.QuestionText</MudText>
                    </div>
                    <div class="px-1 py-1">
                        <MudButton Color="Color.Primary">View</MudButton>
                        <MudButton Color="Color.Warning">Edit</MudButton>
                        <MudButton Color="Color.Error">Delete</MudButton>
                    </div>
                </div>
            }
        </MudPaper>
    </div>
    @if (!string.IsNullOrEmpty(selectedOption))
    {
        <div>Clicked option in menu: @selectedOption</div>
    }
</MudPaper>

@code {
    private Project Project { get; set; } = new();
    private Question SelectedQuestion;

    private string selectedOption;

    protected override void OnInitialized()
    {
        WeakReferenceMessenger.Default.Register<MenuItemClickedMessage>(this, (r, message) =>
        {
            selectedOption = message.SelectedOption;
            InvokeAsync(StateHasChanged);
        });

        Project.Name = "TEST";

        Random random = new Random();

        for (int i = 0; i < 25; i++)
        {
            if(i < 4)
            {
                Project.Questions.Add(new TestOneQuestion
                    {
                        ID = new Guid(),
                        QuestionText = "Lorem ipsum dolor sit amet, consectetur adipiscing elit?",
                        // Answers = [new TestAnswer { Answer = "Duis in dictum leo.", AnswerValue = 0 }, new TestAnswer { Answer = "Morbi viverra, enim in porta tincidunt, metus ipsum imperdiet velit, in facilisis enim odio vitae leo.", AnswerValue = 1 }, new TestAnswer { Answer = "Vestibulum sit amet pulvinar velit, ut ultricies eros", AnswerValue = 2}, new TestAnswer { Answer = "Fusce vel velit commodo, maximus eros quis, faucibus nulla.", AnswerValue = 3 }],
                        Answers = [new TestAnswer { Answer = "Duis in dictum leo.", AnswerValue = CorrentAnswer.A }, new TestAnswer { Answer = "Morbi viverra, enim in porta tincidunt, metus ipsum imperdiet velit, in facilisis enim odio vitae leo.", AnswerValue = CorrentAnswer.B }, new TestAnswer { Answer = "Vestibulum sit amet pulvinar velit, ut ultricies eros", AnswerValue = CorrentAnswer.C }, new TestAnswer { Answer = "Fusce vel velit commodo, maximus eros quis, faucibus nulla.", AnswerValue = CorrentAnswer.D }],
                        CorrentAnswer = (CorrentAnswer)random.Next(4),
                    });
            }
            else if(i < 7)
            {

                int rand = random.Next(4);

                if(rand == 0)
                {
                    rand++;
                }

                List<CorrentAnswer> answers = new List<CorrentAnswer>(rand);

                for (int j = 0; j < rand; j++)
                {
                    answers.Add((CorrentAnswer)j);
                }

                Project.Questions.Add(new TestMultiQuestion
                {
                    ID = new Guid(),
                    QuestionText = "Lorem ipsum dolor sit amet, consectetur adipiscing elit?",
                    // Answers = [new TestAnswer { Answer = "Duis in dictum leo.", AnswerValue = 0 }, new TestAnswer { Answer = "Morbi viverra, enim in porta tincidunt, metus ipsum imperdiet velit, in facilisis enim odio vitae leo.", AnswerValue = 1 }, new TestAnswer { Answer = "Vestibulum sit amet pulvinar velit, ut ultricies eros", AnswerValue = 2 }, new TestAnswer { Answer = "Fusce vel velit commodo, maximus eros quis, faucibus nulla.", AnswerValue = 3 }],
                    Answers = [new TestAnswer { Answer = "Duis in dictum leo.", AnswerValue = CorrentAnswer.A }, new TestAnswer { Answer = "Morbi viverra, enim in porta tincidunt, metus ipsum imperdiet velit, in facilisis enim odio vitae leo.", AnswerValue = CorrentAnswer.B }, new TestAnswer { Answer = "Vestibulum sit amet pulvinar velit, ut ultricies eros", AnswerValue = CorrentAnswer.C }, new TestAnswer { Answer = "Fusce vel velit commodo, maximus eros quis, faucibus nulla.", AnswerValue = CorrentAnswer.D }],
                    CorrentAnswers = answers
                });
            }
            else
            {
                Project.Questions.Add(new OpenQuestion
                {
                    ID = new Guid(),
                    QuestionText = "Lorem ipsum dolor sit amet, consectetur adipiscing elit?",
                    Answer = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis in dictum leo. Morbi viverra, enim in porta tincidunt, metus ipsum imperdiet velit, in facilisis enim odio vitae leo. Vestibulum sit amet pulvinar velit, ut ultricies eros. Ut blandit quam arcu, aliquet condimentum orci condimentum quis. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam sed ipsum nec nulla mollis ullamcorper sit amet eu lorem. Nullam in maximus quam, a cursus purus. Fusce vel velit commodo, maximus eros quis, faucibus nulla."
                });
            }
        }

        SelectedQuestion = Project.Questions[9];
    }

    private void CheckBoxChanged(CorrentAnswer value)
    {
        if (SelectedQuestion is TestMultiQuestion)
        {
            var question = (TestMultiQuestion)SelectedQuestion;

            if (question.CorrentAnswers.Contains(value))
            {
                question.CorrentAnswers.Remove(value);
            }
            else
            {
                question.CorrentAnswers.Add(value);
            }
        }
    }

    public void Dispose()
    {
        WeakReferenceMessenger.Default.Unregister<MenuItemClickedMessage>(this);
    }
}