@page "/"
@* @inject IJSRuntime JSRuntime *@
<MudPaper Class="py-4 px-4 d-flex flex-row" Elevation="4">
    @if (ProjectValue.Name != string.Empty)
    {
        <div class="d-flex flex-column px-1 py-1" style="width:50%;">
            <MudPaper Class="px-1 py-1" Elevation="3">
                <MudText Typo="Typo.h3"><MudText Color="Color.Primary" Typo="Typo.h2" Inline>Project: </MudText>@ProjectValue.Name</MudText>
            </MudPaper>
            <MudPaper Class="px-1 py-1 d-flex flex-column my-1 justify-content-between h-100" Elevation="3">
                <div class="px-1 py-1 h-100">
                    @if (SelectedQuestion != null)
                    {
                        <MudText Typo="Typo.h5"><MudText Typo="Typo.h5" Color="Color.Secondary" Inline>Question: </MudText>@SelectedQuestion.QuestionText</MudText>
                        @switch (SelectedQuestion)
                        {
                            case TestOneQuestion t1Question:
                                <MudText Typo="Typo.h6" Color="Color.Tertiary">Answers:</MudText>
                                <MudRadioGroup @bind-Value="t1Question.CorrectAnswer" T="CorrectAnswer">
                                    @foreach (var answer in t1Question.Answers)
                                    {
                                        <div class="d-flex my-2">
                                            <div>
                                                <MudRadio Value="@(answer.AnswerValue)">
                                                    @if (!Editing)
                                                    {
                                                        @answer.Answer
                                                    }
                                                </MudRadio>
                                            </div>
                                            @if (Editing)
                                            {
                                                <MudTextField @bind-Value="answer.Answer" Label="Provide answer" Clearable FullWidth/>
                                            }
                                        </div>
                                    }
                                </MudRadioGroup>
                                break;
                            case TestMultiQuestion tmquestion:
                                <MudText Typo="Typo.h6" Color="Color.Tertiary">Answers:</MudText>
                                @foreach (var answer in tmquestion.Answers)
                                {
                                    <div class="d-flex my-2">
                                        <div>
                                            <MudCheckBox T="bool" Label="@(!Editing ? answer.Answer : "")" Value="@(tmquestion.CorrectAnswers.Contains(answer.AnswerValue))" ValueChanged="(() => CheckBoxChanged(answer.AnswerValue))"></MudCheckBox>
                                        </div>
                                        @if (Editing)
                                        {
                                            <MudTextField @bind-Value="answer.Answer" Label="Provide answer" Clearable FullWidth/>
                                        }
                                    </div>

                                }

                                break;
                            case OpenQuestion openQuestion:
                                <MudText Typo="Typo.h6" Color="Color.Tertiary">Answer:</MudText>
                                @if (!Editing)
                                {
                                    <MudText>@openQuestion.Answer</MudText>
                                }
                                else
                                {
                                    <MudTextField Text="@openQuestion.Answer" T="string" AutoGrow MaxLines="35"/>
                                }

                                break;
                            default:
                                <MudText>Unknown</MudText>
                                break;
                        }
                    }
                    else
                    {
                        <div class="d-flex justify-content-center align-items-center h-100 flex-column">
                            <div>
                                <MudText Typo="Typo.h5" Align="Align.Center" Color="Color.Tertiary">Add new or do something with question</MudText>
                            </div>
                            <div class="py-2">
                                <MudButton Color="Color.Success" EndIcon="@Icons.Material.Filled.Add">Add new</MudButton>
                            </div>
                        </div>
                    }
                </div>
                @if (SelectedQuestion != null)
                {
                    <div class="d-flex justify-content-end">
                        <MudButton Color="Color.Success">Save</MudButton>
                        <MudButton Color="Color.Error">Cancel</MudButton>
                    </div>
                }
            </MudPaper>
        </div>
        <div class="px-1 py-1 w-50">
            <MudPaper Class="px-1 py-1 my-1 overflow-scroll" Elevation="3" Style="height:94vh;">
                @foreach (var question in ProjectService.GetQuestions(ProjectValue))
                {
                    <div class="d-flex flex-row justify-content-between">
                        <div class="px-1 py-1">
                            <MudText>@question.QuestionText</MudText>
                        </div>
                        <div class="px-1 py-1 d-flex">
                            <div>
                                <MudButton Color="Color.Primary" OnClick="(() => ViewQuestion(question.ID))">View</MudButton>
                            </div>
                            <div>
                                <MudButton Color="Color.Warning" OnClick="(() => EditQuestion(question.ID))">Edit</MudButton>
                            </div>
                            <div>
                                <MudButton Color="Color.Error" OnClick="(() => DeleteQuestion(question.ID))">Delete</MudButton>
                            </div>
                        </div>
                    </div>
                }
            </MudPaper>
        </div>
    }
    else
    {
        <div class="d-flex justify-content-center w-100">
            <div class="d-flex justify-content-center flex-column">
                <div>
                    <MudPaper Elevation="3" Class="p-3 mb-3">
                        <div>
                            <MudText Typo="Typo.h3">Create new project with:</MudText>
                        </div>
                        <div>
                            <MudTreeView T="string" ReadOnly>
                                <MudTreeViewItem Text="File" Expanded="true">
                                    <MudTreeViewItem Text="New"/>
                                </MudTreeViewItem>
                            </MudTreeView>
                        </div>
                    </MudPaper>
                </div>
                <div>
                    <MudPaper Elevation="3" Class="p-3">
                        <div>
                            <MudText Typo="Typo.h3">or open existing project with:</MudText>
                        </div>
                        <div>
                            <MudTreeView T="string" ReadOnly>
                                <MudTreeViewItem Text="File" Expanded="true">
                                    <MudTreeViewItem Text="Open"/>
                                </MudTreeViewItem>
                            </MudTreeView>
                        </div>
                    </MudPaper>
                </div>
                
            </div>
        </div>
    }
    
    @if (!string.IsNullOrEmpty(menuOption))
    {
        <div>Clicked option in menu: @menuOption</div>
    }
</MudPaper>

<MudDialog @bind-Visible="_visible">
    <TitleContent>
        Add new project
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="ProjectName" T="string" Label="Project name"/>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="(() => Submit(NewProjectEnum.Closed))">New</MudButton>
        <MudButton Color="Color.Primary" OnClick="(() => Submit(NewProjectEnum.ClosedAndSave))">New and Save</MudButton>
        <MudButton OnClick="Cancel">Cancel</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog>
    <TitleContent>
        Save project
    </TitleContent>
    <DialogContent>
        <MudText>Do you want to save the project?</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Success" 
                   @* OnClick="Yes" *@
                   >Yes</MudButton>
        <MudButton Color="Color.Error" 
                   @* OnClick="No" *@
                   >No</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private string ProjectName { get; set; } = string.Empty;
    private bool _visible = false;
    // private readonly DialogOptions _dialogOptions = new() { FullWidth = true };
    [Inject] IProjectService ProjectService { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] IDialogService DialogService { get; set; }

    private Project ProjectValue { get; set; } = new();
    private Question? SelectedQuestion;

    private string menuOption;

    private bool Editing = false;
    
    private void Submit(NewProjectEnum newProjectEnum)
    {
        if (ProjectName == string.Empty)
        {
            Snackbar.Add("Project name cannot be empty!", Severity.Error);
            return;
        }

        ProjectValue.Name = ProjectName;

        if (newProjectEnum == NewProjectEnum.ClosedAndSave)
        {
            WeakReferenceMessenger.Default.Send(new SaveFileClickedMessageResponse()
            {
                Project = ProjectValue
            });
        }

        _visible = false;
    }

    private void Cancel()
    {
        _visible = false;
    } 

    private void Show()
    {
        _visible = true;
    }

    protected override void OnInitialized()
    {
        WeakReferenceMessenger.Default.Register<MenuItemClickedMessage>(this, (r, message) =>
        {
            menuOption = message.SelectedOption;
            InvokeAsync(StateHasChanged);
        });

        WeakReferenceMessenger.Default.Register<SaveFileClickedMessage>(this, (r, message) =>
        {
            WeakReferenceMessenger.Default.Send(new SaveFileClickedMessageResponse()
            {
                Project = ProjectValue
            });
        });

        WeakReferenceMessenger.Default.Register<LoadProjectFromFileMessage>(this, (r, message) =>
        {
            ProjectValue = message.Project;
            InvokeAsync(StateHasChanged);
        });

        WeakReferenceMessenger.Default.Register<NewProjectClickedMessage>(this, (recipient, message) =>
        {
            Show();
            InvokeAsync(StateHasChanged);
        });

        // ProjectService.MockData(Project);

        // SelectedQuestion = ProjectService.GetRandomQuestion(Project, QuestionType.Open);
        // Editing = true;
    }
    
    private void EditQuestion(Guid ID)
    {
        Editing = true;
        SelectedQuestion = ProjectService.GetQuestionByID(ProjectValue, ID);
    }

    private void ViewQuestion(Guid ID)
    {
        Editing = false;
        SelectedQuestion = ProjectService.GetQuestionByID(ProjectValue, ID);
        // _ = JSRuntime.InvokeVoidAsync("console.log", $"ViewQuestion(Guid ID = {ID})");
        // StateHasChanged();
    }

    private void DeleteQuestion(Guid ID)
    {
        var response = ProjectService.DeleteQuestion(ProjectValue, ID);
        if (!response.IsSuccess)
        {
            Snackbar.Add(response.Message, Severity.Error);
        }

        if (SelectedQuestion != null && SelectedQuestion.ID == ID)
        {
            SelectedQuestion = null;
        }
    }

    private void CheckBoxChanged(CorrectAnswer value)
    {
        if (SelectedQuestion is not TestMultiQuestion question) return;
        if (question.CorrectAnswers.Contains(value))
        {
            question.CorrectAnswers.Remove(value);
        }
        else
        {
            question.CorrectAnswers.Add(value);
        }
    }

    public void Dispose()
    {
        WeakReferenceMessenger.Default.UnregisterAll(this);
    }

}
