@page "/"
@inject IJSRuntime JSRuntime
<MudPaper Class="py-4 px-4 d-flex flex-row" Elevation="4">
    <div class="d-flex flex-column px-1 py-1" style="width:50%;">
        <MudPaper Class="px-1 py-1" Elevation="3">
            <MudText Typo="Typo.h2"><MudText Color="Color.Primary" Typo="Typo.h2" Inline="true">Project: </MudText>@Project.Name</MudText>
        </MudPaper>
        <MudPaper Class="px-1 py-1 d-flex flex-column my-1 justify-content-between h-100" Elevation="3" >
            <div class="px-1 py-1">
                @if(SelectedQuestion != null)
                {
                    <MudText Typo="Typo.h5"><MudText Typo="Typo.h5" Color="Color.Secondary" Inline="true">Question: </MudText>@SelectedQuestion.QuestionText</MudText>
                    @switch (SelectedQuestion)
                    {
                        case TestOneQuestion:
                            TestOneQuestion t1question = (TestOneQuestion)SelectedQuestion;
                            <MudText Typo="Typo.h6" Color="Color.Tertiary">Answers:</MudText>
                            <MudRadioGroup @bind-Value="t1question.CorrentAnswer" T="CorrentAnswer">
                                @foreach (var answer in t1question.Answers)
                                {
                                    <div>
                                        <MudRadio Value="@(answer.AnswerValue)">@answer.Answer</MudRadio>
                                    </div>
                                }
                            </MudRadioGroup>
                            break;
                        case TestMultiQuestion:
                            TestMultiQuestion tmquestion = (TestMultiQuestion)SelectedQuestion;
                            <MudText Typo="Typo.h6" Color="Color.Tertiary">Answers:</MudText>
                            @foreach (var answer in tmquestion.Answers)
                            {
                                <MudCheckBox T="bool" Label="@answer.Answer" Value="@(tmquestion.CorrentAnswers.Contains(answer.AnswerValue))" ValueChanged="(() => CheckBoxChanged(answer.AnswerValue))"></MudCheckBox>
                            }
                            break;
                        case OpenQuestion:
                            <MudText Typo="Typo.h6" Color="Color.Tertiary">Answer:</MudText>
                            OpenQuestion openQuestion = (OpenQuestion)SelectedQuestion;
                            <MudText>@openQuestion.Answer</MudText>
                            break;
                        default:
                            <MudText>Unknown</MudText>
                            break;
                    }
                }
            </div>
            <div class="d-flex justify-content-end">
                <MudButton Color="Color.Success">Save</MudButton>
                <MudButton Color="Color.Error">Cancel</MudButton>
            </div>
        </MudPaper>
    </div>
    <div class="px-1 py-1 w-50">
        <MudPaper Class="px-1 py-1 my-1 overflow-scroll" Elevation="3" Style="height:94vh;">
            @foreach(var question in ProjectService.GetQuestions(Project))
            {
                <div class="d-flex flex-row justify-content-between">
                    <div class="px-1 py-1">
                        <MudText>@question.QuestionText</MudText>
                    </div>
                    <div class="px-1 py-1 d-flex">
                        <div>
                            <MudButton Color="Color.Primary" OnClick="(() => ViewQuestion(question.ID))">View</MudButton>
                        </div>
                        <div>
                            <MudButton Color="Color.Warning">Edit</MudButton>
                        </div>
                        <div>
                            <MudButton Color="Color.Error">Delete</MudButton>
                        </div>
                    </div>
                </div>
            }
        </MudPaper>
    </div>
    @if (!string.IsNullOrEmpty(menuOption))
    {
        <div>Clicked option in menu: @menuOption</div>
    }
</MudPaper>

@code {

    [Inject] IProjectService ProjectService { get; set; }

    private Project Project { get; set; } = new();
    private Question? SelectedQuestion;

    private string menuOption;

    protected override void OnInitialized()
    {
        WeakReferenceMessenger.Default.Register<MenuItemClickedMessage>(this, (r, message) =>
        {
            menuOption = message.SelectedOption;
            InvokeAsync(StateHasChanged);
        });

        ProjectService.MockData(Project);

        SelectedQuestion = ProjectService.GetRandomQuestion(Project, QuestionType.Open);
    }

    private void ViewQuestion(Guid ID)
    {
        SelectedQuestion = ProjectService.GetQuestionByID(Project, ID);
        _ = JSRuntime.InvokeVoidAsync("console.log", $"ViewQuestion(Guid ID = {ID})");
        StateHasChanged();
    }

    private void CheckBoxChanged(CorrentAnswer value)
    {
        if (SelectedQuestion is TestMultiQuestion)
        {
            var question = (TestMultiQuestion)SelectedQuestion;

            if (question.CorrentAnswers.Contains(value))
            {
                question.CorrentAnswers.Remove(value);
            }
            else
            {
                question.CorrentAnswers.Add(value);
            }
        }
    }

    public void Dispose()
    {
        WeakReferenceMessenger.Default.Unregister<MenuItemClickedMessage>(this);
    }
}