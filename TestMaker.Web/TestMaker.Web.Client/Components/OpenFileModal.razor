
<MudDialog>
    <TitleContent>
        Open project
    </TitleContent>
    <DialogContent>
        <MudStack Style="width: 100%">
            <MudFileUpload T="IBrowserFile"
                           @ref="@_fileUpload"
                           Accept=".tmps"
                           OnFilesChanged="OnInputFileChanged"
                           Hidden="@false"
                           InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
                           InputStyle="opacity:0"
                           tabindex="-1"
                           @ondrop="@ClearDragClass"
                           @ondragenter="@SetDragClass"
                           @ondragleave="@ClearDragClass"
                           @ondragend="@ClearDragClass">
                <ActivatorContent>
                    <MudPaper Height="300px"
                              Outlined="true"
                              Class="@_dragClass">
                        <MudText Typo="Typo.h6">
                            Drag and drop files here or click
                        </MudText>
                        @if (_fileName != string.Empty)
                        {
                        <MudChip T="string"
                                 Color="Color.Dark"
                                 Text="@_fileName"
                                 tabindex="-1" />
                        }
                        
                    </MudPaper>
                </ActivatorContent>
            </MudFileUpload>
            <MudToolBar Gutters="@false"
                        Class="relative d-flex justify-end gap-4">
                <MudButton Color="Color.Primary"
                           OnClick="@OpenFilePickerAsync"
                           Disabled="@(_fileName.Any())"
                           Variant="Variant.Filled">
                    Open file picker
                </MudButton>
                <MudButton Color="Color.Primary"
                           Disabled="@(!_fileName.Any())"
                           OnClick="@Upload"
                           Variant="Variant.Filled">
                    Upload
                </MudButton>
                <MudButton Color="Color.Error"
                           Disabled="@(!_fileName.Any())"
                           OnClick="@ClearAsync"
                           Variant="Variant.Filled">
                    Clear
                </MudButton>
            </MudToolBar>
        </MudStack>
    </DialogContent>
    <DialogActions>
        
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; }
    [Inject] IMessenger Messenger { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;
    private string _fileName = string.Empty;
    private MudFileUpload<IBrowserFile>? _fileUpload;
    
    private async Task ClearAsync()
    {
        await (_fileUpload?.ClearAsync() ?? Task.CompletedTask);
        _fileName = string.Empty;
        ClearDragClass();
    }

    private Task OpenFilePickerAsync()
        => _fileUpload?.OpenFilePickerAsync() ?? Task.CompletedTask;

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();
        if (files.Count != 1)
        {
            Snackbar.Add("files.Count != 1", Severity.Error);
            return;
        }
        foreach (var file in files)
        {
            _fileName = file.Name;
        }

        if (_fileUpload == null)
        {
            Snackbar.Add("_fileUpload  != null", Severity.Error);
            return;
        }
        _fileUpload.Files = files[0];
       
    }

    private async Task Upload()
    {
        try
        {
            if (_fileUpload?.Files == null)
            {
                Snackbar.Add("_fileUpload?.Files == null", Severity.Error);
                return;
            }

            if (!_fileUpload.Files.Name.EndsWith(".tmps", StringComparison.OrdinalIgnoreCase))
            {
                Snackbar.Add("!_fileUpload.Files.Name.EndsWith", Severity.Error);
                return;
            }
            var stream = _fileUpload.Files.OpenReadStream();
            var jsonSerializerOptions = new JsonSerializerOptions()
            {
                WriteIndented = true
            };
            var project = await JsonSerializer.DeserializeAsync<Project>(stream, jsonSerializerOptions) ?? throw new InvalidOperationException();
            Messenger.Send(new LoadProjectFromFileMessage
            {
                Project = project
            });
            MudDialog.Close();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;
    
}