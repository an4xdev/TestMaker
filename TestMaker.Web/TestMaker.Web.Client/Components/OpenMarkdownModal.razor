<MudDialog>
    <TitleContent>
        Open project
    </TitleContent>
    <DialogContent>
        <MudStack Style="width: 100%">
            <MudFileUpload T="IBrowserFile"
                           @ref="@_fileUpload"
                           Accept=".md"
                           OnFilesChanged="OnInputFileChanged"
                           Hidden="@false"
                           InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
                           InputStyle="opacity:0"
                           tabindex="-1"
                           @ondrop="@ClearDragClass"
                           @ondragenter="@SetDragClass"
                           @ondragleave="@ClearDragClass"
                           @ondragend="@ClearDragClass">
                <ActivatorContent>
                    <MudPaper Height="300px"
                              Outlined="true"
                              Class="@_dragClass">
                        <MudText Typo="Typo.h6">
                            Drag and drop files here or click
                        </MudText>
                        @if (_fileName != string.Empty)
                        {
                            <MudChip T="string"
                                     Color="Color.Dark"
                                     Text="@_fileName"
                                     tabindex="-1"/>
                        }

                    </MudPaper>
                </ActivatorContent>
            </MudFileUpload>
            <MudToolBar Gutters="@false"
                        Class="relative d-flex justify-end gap-4">
                <MudButton Color="Color.Primary"
                           OnClick="@OpenFilePickerAsync"
                           Disabled="@(_fileName != string.Empty)"
                           Variant="Variant.Filled">
                    Open file picker
                </MudButton>
                <MudButton Color="Color.Primary"
                           Disabled="@(_fileName == string.Empty)"
                           OnClick="@Upload"
                           Variant="Variant.Filled">
                    Upload
                </MudButton>
                <MudButton Color="Color.Error"
                           Disabled="@(_fileName == string.Empty)"
                           OnClick="@ClearAsync"
                           Variant="Variant.Filled">
                    Clear
                </MudButton>
            </MudToolBar>
        </MudStack>
    </DialogContent>
    <DialogActions>

    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] private MudDialogInstance MudDialog { get; set; }
    [Inject] IMessenger Messenger { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }

    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;
    private string _fileName = string.Empty;
    private MudFileUpload<IBrowserFile>? _fileUpload;

    private async Task ClearAsync()
    {
        await (_fileUpload?.ClearAsync() ?? Task.CompletedTask);
        _fileName = string.Empty;
        ClearDragClass();
    }

    private Task OpenFilePickerAsync()
        => _fileUpload?.OpenFilePickerAsync() ?? Task.CompletedTask;

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();
        if (files.Count != 1)
        {
            Snackbar.Add("You needs to provide only one file.", Severity.Error);
            return;
        }

        _fileName = files[0].Name;

        if (_fileUpload == null)
        {
            Snackbar.Add("An error occured with file loading.", Severity.Error);
            return;
        }

        _fileUpload.Files = files[0];
    }

    private async Task Upload()
    {
        try
        {
            if (_fileUpload?.Files == null)
            {
                Snackbar.Add("You needs to provide file.", Severity.Error);
                return;
            }

            if (!_fileUpload.Files.Name.EndsWith(".md", StringComparison.OrdinalIgnoreCase))
            {
                Snackbar.Add("Your file isn't markdown", Severity.Error);
                return;
            }
            var stream = _fileUpload.Files.OpenReadStream();
            var reader = new StreamReader(stream);
            var content = await reader.ReadToEndAsync();

            if (string.IsNullOrWhiteSpace(content))
            {
                Snackbar.Add("Empty markdown file", Severity.Error);
                return;
            }

            var project = new Project();

            var projectName = false;

            var data = new List<string>();
            
            var lines = content.Split('\n');

            foreach (var line in lines)
            {
                if (string.IsNullOrWhiteSpace(line)) continue;

                if (!projectName)
                {
                    if (!line.StartsWith($"##"))
                    {
                        project.Name = line.Split("#")[1];
                    }
                    else
                    {
                        project.Name = _fileUpload.Files.Name.Split('.')[0];
                        data.Add(line);
                    }

                    projectName = true;
                    continue;
                }

                if (line.StartsWith("##") && (data.Count == 2 || data.Count == 5))
                {
                    var parse = QuestionParser.Parse(data);
                    if (parse.Question != null)
                    {
                        project.Questions.Add(parse.Question);
                        data.Clear();
                    }
                    else if (parse.Message != null)
                    {
                        Snackbar.Add(parse.Message, Severity.Error);
                    }
                    else
                    {
                        Snackbar.Add("An error occurred while processing the question from the file.", Severity.Error);
                        return;
                    }
                }

                data.Add(line);
            }

            if (data.Count is 2 or 5)
            {
                var parse = QuestionParser.Parse(data);
                if (parse.Question != null)
                {
                    project.Questions.Add(parse.Question);
                }
                else if (parse.Message != null)
                {
                    Snackbar.Add(parse.Message, Severity.Error);
                }
                else
                {
                    Snackbar.Add("An error occurred while processing the question from the file.", Severity.Error);
                    return;
                }
            }
            else
            {
                Snackbar.Add("An error occurred while processing the question from the file.", Severity.Error);
                return;
            }

            Messenger.Send(new LoadProjectFromFileMessage
            {
                Project = project
            });
            
            MudDialog.Close();
        }
        catch (Exception e)
        {
            Snackbar.Add("An error occurred with loading project.", Severity.Error);
        }
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;

}